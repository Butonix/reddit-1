# source: https://us1.prisma.sh/collins-d60450/reddit/dev
# timestamp: Wed Aug 28 2019 12:54:56 GMT+0100 (GMT+01:00)

type AggregateComment {
  count: Int!
}

type AggregateDownvote {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSubreddit {
  count: Int!
}

type AggregateUpvote {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Comment implements Node {
  id: ID!
  body: String!
  commentedBy: User!
  upvotes(where: UpvoteWhereInput, orderBy: UpvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Upvote!]
  downvotes(where: DownvoteWhereInput, orderBy: DownvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Downvote!]
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  body: String!
  commentedBy: UserCreateOneInput!
  upvotes: UpvoteCreateManyWithoutCommentInput
  downvotes: DownvoteCreateManyWithoutCommentInput
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutDownvotesInput {
  create: CommentCreateWithoutDownvotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutUpvotesInput {
  create: CommentCreateWithoutUpvotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutDownvotesInput {
  id: ID
  body: String!
  commentedBy: UserCreateOneInput!
  upvotes: UpvoteCreateManyWithoutCommentInput
  post: PostCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutPostInput {
  id: ID
  body: String!
  commentedBy: UserCreateOneInput!
  upvotes: UpvoteCreateManyWithoutCommentInput
  downvotes: DownvoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutUpvotesInput {
  id: ID
  body: String!
  commentedBy: UserCreateOneInput!
  downvotes: DownvoteCreateManyWithoutCommentInput
  post: PostCreateOneWithoutCommentsInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  body: String
  commentedBy: UserUpdateOneRequiredInput
  upvotes: UpvoteUpdateManyWithoutCommentInput
  downvotes: DownvoteUpdateManyWithoutCommentInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  body: String
}

input CommentUpdateManyMutationInput {
  body: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneWithoutDownvotesInput {
  create: CommentCreateWithoutDownvotesInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CommentUpdateWithoutDownvotesDataInput
  upsert: CommentUpsertWithoutDownvotesInput
}

input CommentUpdateOneWithoutUpvotesInput {
  create: CommentCreateWithoutUpvotesInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CommentUpdateWithoutUpvotesDataInput
  upsert: CommentUpsertWithoutUpvotesInput
}

input CommentUpdateWithoutDownvotesDataInput {
  body: String
  commentedBy: UserUpdateOneRequiredInput
  upvotes: UpvoteUpdateManyWithoutCommentInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutPostDataInput {
  body: String
  commentedBy: UserUpdateOneRequiredInput
  upvotes: UpvoteUpdateManyWithoutCommentInput
  downvotes: DownvoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutUpvotesDataInput {
  body: String
  commentedBy: UserUpdateOneRequiredInput
  downvotes: DownvoteUpdateManyWithoutCommentInput
  post: PostUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithoutDownvotesInput {
  update: CommentUpdateWithoutDownvotesDataInput!
  create: CommentCreateWithoutDownvotesInput!
}

input CommentUpsertWithoutUpvotesInput {
  update: CommentUpdateWithoutUpvotesDataInput!
  create: CommentCreateWithoutUpvotesInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  commentedBy: UserWhereInput
  upvotes_every: UpvoteWhereInput
  upvotes_some: UpvoteWhereInput
  upvotes_none: UpvoteWhereInput
  downvotes_every: DownvoteWhereInput
  downvotes_some: DownvoteWhereInput
  downvotes_none: DownvoteWhereInput
  post: PostWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Downvote implements Node {
  id: ID!
  downvotedBy: User!
  post: Post
  comment: Comment
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DownvoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DownvoteEdge]!
  aggregate: AggregateDownvote!
}

input DownvoteCreateInput {
  id: ID
  downvotedBy: UserCreateOneInput!
  post: PostCreateOneWithoutDownvotesInput
  comment: CommentCreateOneWithoutDownvotesInput
}

input DownvoteCreateManyWithoutCommentInput {
  create: [DownvoteCreateWithoutCommentInput!]
  connect: [DownvoteWhereUniqueInput!]
}

input DownvoteCreateManyWithoutPostInput {
  create: [DownvoteCreateWithoutPostInput!]
  connect: [DownvoteWhereUniqueInput!]
}

input DownvoteCreateWithoutCommentInput {
  id: ID
  downvotedBy: UserCreateOneInput!
  post: PostCreateOneWithoutDownvotesInput
}

input DownvoteCreateWithoutPostInput {
  id: ID
  downvotedBy: UserCreateOneInput!
  comment: CommentCreateOneWithoutDownvotesInput
}

"""An edge in a connection."""
type DownvoteEdge {
  """The item at the end of the edge."""
  node: Downvote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DownvoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DownvotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DownvoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DownvoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DownvoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DownvoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DownvoteSubscriptionPayload {
  mutation: MutationType!
  node: Downvote
  updatedFields: [String!]
  previousValues: DownvotePreviousValues
}

input DownvoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DownvoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DownvoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DownvoteSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DownvoteWhereInput
}

input DownvoteUpdateInput {
  downvotedBy: UserUpdateOneRequiredInput
  post: PostUpdateOneWithoutDownvotesInput
  comment: CommentUpdateOneWithoutDownvotesInput
}

input DownvoteUpdateManyWithoutCommentInput {
  create: [DownvoteCreateWithoutCommentInput!]
  connect: [DownvoteWhereUniqueInput!]
  set: [DownvoteWhereUniqueInput!]
  disconnect: [DownvoteWhereUniqueInput!]
  delete: [DownvoteWhereUniqueInput!]
  update: [DownvoteUpdateWithWhereUniqueWithoutCommentInput!]
  deleteMany: [DownvoteScalarWhereInput!]
  upsert: [DownvoteUpsertWithWhereUniqueWithoutCommentInput!]
}

input DownvoteUpdateManyWithoutPostInput {
  create: [DownvoteCreateWithoutPostInput!]
  connect: [DownvoteWhereUniqueInput!]
  set: [DownvoteWhereUniqueInput!]
  disconnect: [DownvoteWhereUniqueInput!]
  delete: [DownvoteWhereUniqueInput!]
  update: [DownvoteUpdateWithWhereUniqueWithoutPostInput!]
  deleteMany: [DownvoteScalarWhereInput!]
  upsert: [DownvoteUpsertWithWhereUniqueWithoutPostInput!]
}

input DownvoteUpdateWithoutCommentDataInput {
  downvotedBy: UserUpdateOneRequiredInput
  post: PostUpdateOneWithoutDownvotesInput
}

input DownvoteUpdateWithoutPostDataInput {
  downvotedBy: UserUpdateOneRequiredInput
  comment: CommentUpdateOneWithoutDownvotesInput
}

input DownvoteUpdateWithWhereUniqueWithoutCommentInput {
  where: DownvoteWhereUniqueInput!
  data: DownvoteUpdateWithoutCommentDataInput!
}

input DownvoteUpdateWithWhereUniqueWithoutPostInput {
  where: DownvoteWhereUniqueInput!
  data: DownvoteUpdateWithoutPostDataInput!
}

input DownvoteUpsertWithWhereUniqueWithoutCommentInput {
  where: DownvoteWhereUniqueInput!
  update: DownvoteUpdateWithoutCommentDataInput!
  create: DownvoteCreateWithoutCommentInput!
}

input DownvoteUpsertWithWhereUniqueWithoutPostInput {
  where: DownvoteWhereUniqueInput!
  update: DownvoteUpdateWithoutPostDataInput!
  create: DownvoteCreateWithoutPostInput!
}

input DownvoteWhereInput {
  """Logical AND on all given filters."""
  AND: [DownvoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [DownvoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DownvoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  downvotedBy: UserWhereInput
  post: PostWhereInput
  comment: CommentWhereInput
}

input DownvoteWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createSubreddit(data: SubredditCreateInput!): Subreddit!
  createPost(data: PostCreateInput!): Post!
  createComment(data: CommentCreateInput!): Comment!
  createUpvote(data: UpvoteCreateInput!): Upvote!
  createDownvote(data: DownvoteCreateInput!): Downvote!
  createUser(data: UserCreateInput!): User!
  updateSubreddit(data: SubredditUpdateInput!, where: SubredditWhereUniqueInput!): Subreddit
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateUpvote(data: UpvoteUpdateInput!, where: UpvoteWhereUniqueInput!): Upvote
  updateDownvote(data: DownvoteUpdateInput!, where: DownvoteWhereUniqueInput!): Downvote
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteSubreddit(where: SubredditWhereUniqueInput!): Subreddit
  deletePost(where: PostWhereUniqueInput!): Post
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteUpvote(where: UpvoteWhereUniqueInput!): Upvote
  deleteDownvote(where: DownvoteWhereUniqueInput!): Downvote
  deleteUser(where: UserWhereUniqueInput!): User
  upsertSubreddit(where: SubredditWhereUniqueInput!, create: SubredditCreateInput!, update: SubredditUpdateInput!): Subreddit!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertUpvote(where: UpvoteWhereUniqueInput!, create: UpvoteCreateInput!, update: UpvoteUpdateInput!): Upvote!
  upsertDownvote(where: DownvoteWhereUniqueInput!, create: DownvoteCreateInput!, update: DownvoteUpdateInput!): Downvote!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManySubreddits(data: SubredditUpdateManyMutationInput!, where: SubredditWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManySubreddits(where: SubredditWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyUpvotes(where: UpvoteWhereInput): BatchPayload!
  deleteManyDownvotes(where: DownvoteWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  title: String!
  description: String
  image: String
  link: String
  postedBy: User!
  subreddit: Subreddit!
  isOC: Boolean!
  isNSFW: Boolean!
  isNSFL: Boolean!
  isSerious: Boolean!
  hasSpoiler: Boolean!
  upvotes(where: UpvoteWhereInput, orderBy: UpvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Upvote!]
  downvotes(where: DownvoteWhereInput, orderBy: DownvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Downvote!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserCreateOneWithoutPostsInput!
  subreddit: SubredditCreateOneWithoutPostsInput!
  upvotes: UpvoteCreateManyWithoutPostInput
  downvotes: DownvoteCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutSubredditInput {
  create: [PostCreateWithoutSubredditInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutDownvotesInput {
  create: PostCreateWithoutDownvotesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutUpvotesInput {
  create: PostCreateWithoutUpvotesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserCreateOneWithoutPostsInput!
  subreddit: SubredditCreateOneWithoutPostsInput!
  upvotes: UpvoteCreateManyWithoutPostInput
  downvotes: DownvoteCreateManyWithoutPostInput
}

input PostCreateWithoutDownvotesInput {
  id: ID
  title: String!
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserCreateOneWithoutPostsInput!
  subreddit: SubredditCreateOneWithoutPostsInput!
  upvotes: UpvoteCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutPostedByInput {
  id: ID
  title: String!
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  subreddit: SubredditCreateOneWithoutPostsInput!
  upvotes: UpvoteCreateManyWithoutPostInput
  downvotes: DownvoteCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutSubredditInput {
  id: ID
  title: String!
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserCreateOneWithoutPostsInput!
  upvotes: UpvoteCreateManyWithoutPostInput
  downvotes: DownvoteCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutUpvotesInput {
  id: ID
  title: String!
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserCreateOneWithoutPostsInput!
  subreddit: SubredditCreateOneWithoutPostsInput!
  downvotes: DownvoteCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  link_ASC
  link_DESC
  isOC_ASC
  isOC_DESC
  isNSFW_ASC
  isNSFW_DESC
  isNSFL_ASC
  isNSFL_DESC
  isSerious_ASC
  isSerious_DESC
  hasSpoiler_ASC
  hasSpoiler_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  description: String
  image: String
  link: String
  isOC: Boolean!
  isNSFW: Boolean!
  isNSFL: Boolean!
  isSerious: Boolean!
  hasSpoiler: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  isOC: Boolean

  """All values that are not equal to given value."""
  isOC_not: Boolean
  isNSFW: Boolean

  """All values that are not equal to given value."""
  isNSFW_not: Boolean
  isNSFL: Boolean

  """All values that are not equal to given value."""
  isNSFL_not: Boolean
  isSerious: Boolean

  """All values that are not equal to given value."""
  isSerious_not: Boolean
  hasSpoiler: Boolean

  """All values that are not equal to given value."""
  hasSpoiler_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserUpdateOneRequiredWithoutPostsInput
  subreddit: SubredditUpdateOneRequiredWithoutPostsInput
  upvotes: UpvoteUpdateManyWithoutPostInput
  downvotes: DownvoteUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
}

input PostUpdateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPostedByInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPostedByInput!]
}

input PostUpdateManyWithoutSubredditInput {
  create: [PostCreateWithoutSubredditInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutSubredditInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutSubredditInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneWithoutDownvotesInput {
  create: PostCreateWithoutDownvotesInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PostUpdateWithoutDownvotesDataInput
  upsert: PostUpsertWithoutDownvotesInput
}

input PostUpdateOneWithoutUpvotesInput {
  create: PostCreateWithoutUpvotesInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PostUpdateWithoutUpvotesDataInput
  upsert: PostUpsertWithoutUpvotesInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserUpdateOneRequiredWithoutPostsInput
  subreddit: SubredditUpdateOneRequiredWithoutPostsInput
  upvotes: UpvoteUpdateManyWithoutPostInput
  downvotes: DownvoteUpdateManyWithoutPostInput
}

input PostUpdateWithoutDownvotesDataInput {
  title: String
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserUpdateOneRequiredWithoutPostsInput
  subreddit: SubredditUpdateOneRequiredWithoutPostsInput
  upvotes: UpvoteUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutPostedByDataInput {
  title: String
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  subreddit: SubredditUpdateOneRequiredWithoutPostsInput
  upvotes: UpvoteUpdateManyWithoutPostInput
  downvotes: DownvoteUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutSubredditDataInput {
  title: String
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserUpdateOneRequiredWithoutPostsInput
  upvotes: UpvoteUpdateManyWithoutPostInput
  downvotes: DownvoteUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutUpvotesDataInput {
  title: String
  description: String
  image: String
  link: String
  isOC: Boolean
  isNSFW: Boolean
  isNSFL: Boolean
  isSerious: Boolean
  hasSpoiler: Boolean
  postedBy: UserUpdateOneRequiredWithoutPostsInput
  subreddit: SubredditUpdateOneRequiredWithoutPostsInput
  downvotes: DownvoteUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPostedByDataInput!
}

input PostUpdateWithWhereUniqueWithoutSubredditInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutSubredditDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutDownvotesInput {
  update: PostUpdateWithoutDownvotesDataInput!
  create: PostCreateWithoutDownvotesInput!
}

input PostUpsertWithoutUpvotesInput {
  update: PostUpdateWithoutUpvotesDataInput!
  create: PostCreateWithoutUpvotesInput!
}

input PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPostedByDataInput!
  create: PostCreateWithoutPostedByInput!
}

input PostUpsertWithWhereUniqueWithoutSubredditInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutSubredditDataInput!
  create: PostCreateWithoutSubredditInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  isOC: Boolean

  """All values that are not equal to given value."""
  isOC_not: Boolean
  isNSFW: Boolean

  """All values that are not equal to given value."""
  isNSFW_not: Boolean
  isNSFL: Boolean

  """All values that are not equal to given value."""
  isNSFL_not: Boolean
  isSerious: Boolean

  """All values that are not equal to given value."""
  isSerious_not: Boolean
  hasSpoiler: Boolean

  """All values that are not equal to given value."""
  hasSpoiler_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  subreddit: SubredditWhereInput
  upvotes_every: UpvoteWhereInput
  upvotes_some: UpvoteWhereInput
  upvotes_none: UpvoteWhereInput
  downvotes_every: DownvoteWhereInput
  downvotes_some: DownvoteWhereInput
  downvotes_none: DownvoteWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  subreddits(where: SubredditWhereInput, orderBy: SubredditOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subreddit]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  upvotes(where: UpvoteWhereInput, orderBy: UpvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Upvote]!
  downvotes(where: DownvoteWhereInput, orderBy: DownvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Downvote]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  subreddit(where: SubredditWhereUniqueInput!): Subreddit
  post(where: PostWhereUniqueInput!): Post
  comment(where: CommentWhereUniqueInput!): Comment
  upvote(where: UpvoteWhereUniqueInput!): Upvote
  downvote(where: DownvoteWhereUniqueInput!): Downvote
  user(where: UserWhereUniqueInput!): User
  subredditsConnection(where: SubredditWhereInput, orderBy: SubredditOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubredditConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  upvotesConnection(where: UpvoteWhereInput, orderBy: UpvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UpvoteConnection!
  downvotesConnection(where: DownvoteWhereInput, orderBy: DownvoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DownvoteConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Roles {
  ADMIN
  MODERATOR
  USER
  POSTCREATE
  POSTUPDATE
  POSTDELETE
  SUBCREATE
  SUBUPDATE
  SUBDELETE
  ROLEUPDATE
}

type Subreddit implements Node {
  id: ID!
  name: String!
  description: String
  topics: [String!]!
  isNSFW: Boolean!
  type: [SubredditTypes!]!
  path: String!
  image: String
  headerBgImage: String
  createdBy: User!
  moderators(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SubredditConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubredditEdge]!
  aggregate: AggregateSubreddit!
}

input SubredditCreateInput {
  id: ID
  name: String!
  description: String
  isNSFW: Boolean
  path: String!
  image: String
  headerBgImage: String
  topics: SubredditCreatetopicsInput
  type: SubredditCreatetypeInput
  createdBy: UserCreateOneInput!
  moderators: UserCreateManyInput
  followers: UserCreateManyInput
  posts: PostCreateManyWithoutSubredditInput
}

input SubredditCreateOneWithoutPostsInput {
  create: SubredditCreateWithoutPostsInput
  connect: SubredditWhereUniqueInput
}

input SubredditCreatetopicsInput {
  set: [String!]
}

input SubredditCreatetypeInput {
  set: [SubredditTypes!]
}

input SubredditCreateWithoutPostsInput {
  id: ID
  name: String!
  description: String
  isNSFW: Boolean
  path: String!
  image: String
  headerBgImage: String
  topics: SubredditCreatetopicsInput
  type: SubredditCreatetypeInput
  createdBy: UserCreateOneInput!
  moderators: UserCreateManyInput
  followers: UserCreateManyInput
}

"""An edge in a connection."""
type SubredditEdge {
  """The item at the end of the edge."""
  node: Subreddit!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubredditOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isNSFW_ASC
  isNSFW_DESC
  path_ASC
  path_DESC
  image_ASC
  image_DESC
  headerBgImage_ASC
  headerBgImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubredditPreviousValues {
  id: ID!
  name: String!
  description: String
  topics: [String!]!
  isNSFW: Boolean!
  type: [SubredditTypes!]!
  path: String!
  image: String
  headerBgImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubredditSubscriptionPayload {
  mutation: MutationType!
  node: Subreddit
  updatedFields: [String!]
  previousValues: SubredditPreviousValues
}

input SubredditSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubredditSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubredditSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubredditSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubredditWhereInput
}

enum SubredditTypes {
  PUBLIC
  PRIVATE
  RESTRICTED
}

input SubredditUpdateInput {
  name: String
  description: String
  isNSFW: Boolean
  path: String
  image: String
  headerBgImage: String
  topics: SubredditUpdatetopicsInput
  type: SubredditUpdatetypeInput
  createdBy: UserUpdateOneRequiredInput
  moderators: UserUpdateManyInput
  followers: UserUpdateManyInput
  posts: PostUpdateManyWithoutSubredditInput
}

input SubredditUpdateManyMutationInput {
  name: String
  description: String
  isNSFW: Boolean
  path: String
  image: String
  headerBgImage: String
  topics: SubredditUpdatetopicsInput
  type: SubredditUpdatetypeInput
}

input SubredditUpdateOneRequiredWithoutPostsInput {
  create: SubredditCreateWithoutPostsInput
  connect: SubredditWhereUniqueInput
  update: SubredditUpdateWithoutPostsDataInput
  upsert: SubredditUpsertWithoutPostsInput
}

input SubredditUpdatetopicsInput {
  set: [String!]
}

input SubredditUpdatetypeInput {
  set: [SubredditTypes!]
}

input SubredditUpdateWithoutPostsDataInput {
  name: String
  description: String
  isNSFW: Boolean
  path: String
  image: String
  headerBgImage: String
  topics: SubredditUpdatetopicsInput
  type: SubredditUpdatetypeInput
  createdBy: UserUpdateOneRequiredInput
  moderators: UserUpdateManyInput
  followers: UserUpdateManyInput
}

input SubredditUpsertWithoutPostsInput {
  update: SubredditUpdateWithoutPostsDataInput!
  create: SubredditCreateWithoutPostsInput!
}

input SubredditWhereInput {
  """Logical AND on all given filters."""
  AND: [SubredditWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubredditWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubredditWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isNSFW: Boolean

  """All values that are not equal to given value."""
  isNSFW_not: Boolean
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  headerBgImage: String

  """All values that are not equal to given value."""
  headerBgImage_not: String

  """All values that are contained in given list."""
  headerBgImage_in: [String!]

  """All values that are not contained in given list."""
  headerBgImage_not_in: [String!]

  """All values less than the given value."""
  headerBgImage_lt: String

  """All values less than or equal the given value."""
  headerBgImage_lte: String

  """All values greater than the given value."""
  headerBgImage_gt: String

  """All values greater than or equal the given value."""
  headerBgImage_gte: String

  """All values containing the given string."""
  headerBgImage_contains: String

  """All values not containing the given string."""
  headerBgImage_not_contains: String

  """All values starting with the given string."""
  headerBgImage_starts_with: String

  """All values not starting with the given string."""
  headerBgImage_not_starts_with: String

  """All values ending with the given string."""
  headerBgImage_ends_with: String

  """All values not ending with the given string."""
  headerBgImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdBy: UserWhereInput
  moderators_every: UserWhereInput
  moderators_some: UserWhereInput
  moderators_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input SubredditWhereUniqueInput {
  id: ID
  path: String
}

type Subscription {
  subreddit(where: SubredditSubscriptionWhereInput): SubredditSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  upvote(where: UpvoteSubscriptionWhereInput): UpvoteSubscriptionPayload
  downvote(where: DownvoteSubscriptionWhereInput): DownvoteSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Upvote implements Node {
  id: ID!
  upvotedBy: User!
  post: Post
  comment: Comment
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UpvoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UpvoteEdge]!
  aggregate: AggregateUpvote!
}

input UpvoteCreateInput {
  id: ID
  upvotedBy: UserCreateOneInput!
  post: PostCreateOneWithoutUpvotesInput
  comment: CommentCreateOneWithoutUpvotesInput
}

input UpvoteCreateManyWithoutCommentInput {
  create: [UpvoteCreateWithoutCommentInput!]
  connect: [UpvoteWhereUniqueInput!]
}

input UpvoteCreateManyWithoutPostInput {
  create: [UpvoteCreateWithoutPostInput!]
  connect: [UpvoteWhereUniqueInput!]
}

input UpvoteCreateWithoutCommentInput {
  id: ID
  upvotedBy: UserCreateOneInput!
  post: PostCreateOneWithoutUpvotesInput
}

input UpvoteCreateWithoutPostInput {
  id: ID
  upvotedBy: UserCreateOneInput!
  comment: CommentCreateOneWithoutUpvotesInput
}

"""An edge in a connection."""
type UpvoteEdge {
  """The item at the end of the edge."""
  node: Upvote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UpvoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UpvotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UpvoteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UpvoteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UpvoteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UpvoteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UpvoteSubscriptionPayload {
  mutation: MutationType!
  node: Upvote
  updatedFields: [String!]
  previousValues: UpvotePreviousValues
}

input UpvoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UpvoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UpvoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UpvoteSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UpvoteWhereInput
}

input UpvoteUpdateInput {
  upvotedBy: UserUpdateOneRequiredInput
  post: PostUpdateOneWithoutUpvotesInput
  comment: CommentUpdateOneWithoutUpvotesInput
}

input UpvoteUpdateManyWithoutCommentInput {
  create: [UpvoteCreateWithoutCommentInput!]
  connect: [UpvoteWhereUniqueInput!]
  set: [UpvoteWhereUniqueInput!]
  disconnect: [UpvoteWhereUniqueInput!]
  delete: [UpvoteWhereUniqueInput!]
  update: [UpvoteUpdateWithWhereUniqueWithoutCommentInput!]
  deleteMany: [UpvoteScalarWhereInput!]
  upsert: [UpvoteUpsertWithWhereUniqueWithoutCommentInput!]
}

input UpvoteUpdateManyWithoutPostInput {
  create: [UpvoteCreateWithoutPostInput!]
  connect: [UpvoteWhereUniqueInput!]
  set: [UpvoteWhereUniqueInput!]
  disconnect: [UpvoteWhereUniqueInput!]
  delete: [UpvoteWhereUniqueInput!]
  update: [UpvoteUpdateWithWhereUniqueWithoutPostInput!]
  deleteMany: [UpvoteScalarWhereInput!]
  upsert: [UpvoteUpsertWithWhereUniqueWithoutPostInput!]
}

input UpvoteUpdateWithoutCommentDataInput {
  upvotedBy: UserUpdateOneRequiredInput
  post: PostUpdateOneWithoutUpvotesInput
}

input UpvoteUpdateWithoutPostDataInput {
  upvotedBy: UserUpdateOneRequiredInput
  comment: CommentUpdateOneWithoutUpvotesInput
}

input UpvoteUpdateWithWhereUniqueWithoutCommentInput {
  where: UpvoteWhereUniqueInput!
  data: UpvoteUpdateWithoutCommentDataInput!
}

input UpvoteUpdateWithWhereUniqueWithoutPostInput {
  where: UpvoteWhereUniqueInput!
  data: UpvoteUpdateWithoutPostDataInput!
}

input UpvoteUpsertWithWhereUniqueWithoutCommentInput {
  where: UpvoteWhereUniqueInput!
  update: UpvoteUpdateWithoutCommentDataInput!
  create: UpvoteCreateWithoutCommentInput!
}

input UpvoteUpsertWithWhereUniqueWithoutPostInput {
  where: UpvoteWhereUniqueInput!
  update: UpvoteUpdateWithoutPostDataInput!
  create: UpvoteCreateWithoutPostInput!
}

input UpvoteWhereInput {
  """Logical AND on all given filters."""
  AND: [UpvoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [UpvoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UpvoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  upvotedBy: UserWhereInput
  post: PostWhereInput
  comment: CommentWhereInput
}

input UpvoteWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  image: String
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  resetToken: String
  resetTokenExpiry: Float
  roles: [Roles!]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  password: String!
  image: String
  resetToken: String
  resetTokenExpiry: Float
  roles: UserCreaterolesInput
  followers: UserCreateManyInput
  posts: PostCreateManyWithoutPostedByInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [Roles!]
}

input UserCreateWithoutPostsInput {
  id: ID
  username: String!
  email: String!
  password: String!
  image: String
  resetToken: String
  resetTokenExpiry: Float
  roles: UserCreaterolesInput
  followers: UserCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  image_ASC
  image_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  image: String
  resetToken: String
  resetTokenExpiry: Float
  roles: [Roles!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  email: String
  password: String
  image: String
  resetToken: String
  resetTokenExpiry: Float
  roles: UserUpdaterolesInput
  followers: UserUpdateManyInput
  posts: PostUpdateManyWithoutPostedByInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  image: String
  resetToken: String
  resetTokenExpiry: Float
  roles: UserUpdaterolesInput
  followers: UserUpdateManyInput
  posts: PostUpdateManyWithoutPostedByInput
}

input UserUpdateManyDataInput {
  username: String
  email: String
  password: String
  image: String
  resetToken: String
  resetTokenExpiry: Float
  roles: UserUpdaterolesInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
  image: String
  resetToken: String
  resetTokenExpiry: Float
  roles: UserUpdaterolesInput
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdaterolesInput {
  set: [Roles!]
}

input UserUpdateWithoutPostsDataInput {
  username: String
  email: String
  password: String
  image: String
  resetToken: String
  resetTokenExpiry: Float
  roles: UserUpdaterolesInput
  followers: UserUpdateManyInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
